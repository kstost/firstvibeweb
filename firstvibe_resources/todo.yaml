execution_order:
  phases:
    - description: Next.js 프로젝트를 초기화하고, 스타일링 및 기타 설정을 완료합니다. 프로젝트 전반에서 재사용될 핵심 UI 컴포넌트(`CliCopy`)를 개발하여 후속 개발의 기반을 마련합니다. 이
        단계는 전체 프로젝트의 기술적 토대를 구축합니다.
      phase_name: "Phase 1: 프로젝트 설정 및 핵심 컴포넌트 개발"
      task_ids:
        - setup-project
        - C-000
    - description: 랜딩 페이지를 구성하는 각 정보 섹션(Hero, How It Works, Features 등)을 독립적인 컴포넌트로 개발합니다. 각 컴포넌트는 반응형 디자인을 고려하여 구현되며, 페이지의
        시각적 및 정보적 구조를 형성합니다.
      phase_name: "Phase 2: 섹션 컴포넌트 개발"
      task_ids:
        - setup-layout
        - C-001
        - C-002
        - C-003
        - C-004
        - C-005
        - C-006
    - description: 개발된 모든 섹션 컴포넌트를 `page.tsx`에 조립하여 완전한 랜딩 페이지를 구성합니다. Google Analytics 연동, 성능 최적화, 최종 반응형 테스트 등 비기능적 요구사항을 최종
        점검하고 구현하여 프로젝트의 완성도를 높입니다.
      phase_name: "Phase 3: 페이지 통합 및 비기능 요구사항 구현"
      task_ids:
        - P-001
        - NFR-005
        - NFR-001-002
  summary: 프로젝트는 3단계로 진행됩니다. 먼저 Next.js 프로젝트 설정과 핵심 `CliCopy` 컴포넌트를 개발하고, 이어서 각 정보 섹션 컴포넌트를 독립적으로 구현합니다. 마지막으로, 개발된 모든
    컴포넌트를 하나의 페이지로 조립하고 Google Analytics 연동 및 반응형 최종 점검을 수행한 후 Vercel을 통해 배포합니다.
implementation_guides:
  - category: Styling
    code_examples:
      - code: |-
          import { type ClassValue, clsx } from 'clsx';
          import { twMerge } from 'tailwind-merge';

          export function cn(...inputs: ClassValue[]) {
            return twMerge(clsx(inputs));
          }

          // Usage in a component
          // <button className={cn('p-2 bg-blue-500', { 'bg-red-500': isError })} />
        description: "`clsx`와 `tailwind-merge`를 결합한 유틸리티 함수 `cn`을 생성하여 사용합니다. 이를 통해 조건부 클래스와 기본 클래스를 안전하게 병합할 수 있습니다."
        language: typescript
    content: Tailwind CSS 클래스를 동적으로 조합하거나 조건부로 적용할 때, 클래스 충돌(e.g., `p-2`와 `p-4`가 동시에 적용)이나 가독성 저하 문제가 발생할 수 있습니다. `clsx`는
      조건부 클래스를 간결하게 작성하도록 돕고, `tailwind-merge`는 충돌하는 Tailwind 클래스를 지능적으로 병합하여 마지막에 정의된 유틸리티가 우선 적용되도록 보장합니다. 이 두 라이브러리를
      함께 사용하는 유틸리티 함수(보통 `cn`으로 명명)를 만들어 사용하면 유지보수성이 높고 예측 가능한 스타일링 코드를 작성할 수 있습니다.
    id: tailwind-class-management
    related_tasks:
      - C-000
    title: clsx와 tailwind-merge를 이용한 조건부 클래스 관리
project:
  description: CLI 도구 `firstvibe`의 핵심 가치를 전달하고, 방문자의 `npx firstvibe` 명령어 실행을 유도하는 단일 페이지 정적 랜딩 페이지를 구축합니다.
  name: firstvibe 랜딩 페이지
tasks:
  - completion_criteria:
      - "`create-next-app` 명령어가 성공적으로 실행되어 프로젝트 구조가 생성되어야 합니다."
      - "`clsx`와 `tailwind-merge`가 `package.json`의 `dependencies`에 추가되어야 합니다."
      - "`tailwind.config.ts` 파일에 `backdropBlur` 확장이 포함되어야 합니다."
    description: "`create-next-app`을 사용하여 Next.js, TypeScript, Tailwind CSS, ESLint가 포함된 프로젝트를 생성하고, 추가 의존성을 설치하며,
      `tailwind.config.ts`를 TRD에 명시된 대로 설정합니다."
    files:
      - description: 프로젝트의 의존성 관리 및 스크립트 정의 파일. `clsx`, `tailwind-merge` 추가
        path: package.json
        type: modify
      - description: Tailwind CSS 설정 파일. `colors`, `backdropBlur` 등 커스텀 테마 정의
        path: tailwind.config.ts
        type: modify
      - description: PostCSS 설정 파일. Next.js와 Tailwind CSS 연동을 위해 필요함
        path: postcss.config.mjs
        type: create
      - description: 전역 CSS 스타일 및 Tailwind CSS 지시문(@tailwind) 포함
        path: src/app/globals.css
        type: modify
    id: setup-project
    order: 1
    priority: P0
    subtasks:
      - category: setup
        description: "`npx create-next-app@latest firstvibe-landing --typescript --tailwind --eslint` 명령어를 실행하여 프로젝트를 생성합니다."
        id: setup-project-init
        title: Next.js 프로젝트 생성
      - category: setup
        description: "`npm install clsx tailwind-merge` 명령어를 실행하여 Tailwind CSS 클래스 관리 유틸리티를 설치합니다."
        id: setup-project-install-deps
        title: 추가 의존성 설치
      - category: setup
        description: TRD에 명시된 대로 `theme.extend`에 `backdropBlur` 속성을 추가하여 Glassmorphism 효과를 준비합니다.
        id: setup-project-tailwind-config
        title: tailwind.config.ts 설정
    title: Next.js 프로젝트 초기화 및 기본 설정
  - completion_criteria:
      - 컴포넌트 클릭 시 `textToCopy` prop의 값이 클립보드에 복사되어야 합니다.
      - 클릭 후 1.5초 동안 '복사 완료!' 또는 체크 아이콘과 같은 시각적 피드백이 표시된 후 사라져야 합니다.
      - TRD에 명시된 Glassmorphism 스타일(`bg-white/10 backdrop-blur-xl`)이 적용되어야 합니다.
    dependencies:
      - setup-project
    description: "`npx firstvibe` 텍스트와 복사 버튼을 포함하는 재사용 가능한 UI 컴포넌트인 `CliCopy.tsx`를 개발합니다. 이 컴포넌트는 클라이언트 측에서 동작하며, 복사 상태를
      관리하고 사용자에게 시각적 피드백을 제공합니다."
    files:
      - description: 클립보드 복사 기능을 제공하는 재사용 가능한 UI 컴포넌트
        path: src/components/ui/CliCopy.tsx
        type: create
    id: C-000
    order: 2
    priority: P0
    risks:
      - mitigation: "`navigator.clipboard`는 보안 컨텍스트(HTTPS 또는 localhost)에서만 작동합니다. 개발 중 HTTP 환경에서 테스트할 경우 기능이 작동하지 않을 수 있음을 인지하고,
          HTTPS 환경에서 최종 검증을 수행해야 합니다."
        risk: "`navigator.clipboard` API는 특정 브라우저나 비-보안 환경에서 지원되지 않을 수 있습니다."
    subtasks:
      - category: UI
        description: "`'use client'` 지시문을 파일 최상단에 추가하여 클라이언트 컴포넌트로 만듭니다. `useState` 훅을 사용하여 복사 완료 상태(`isCopied`)를 관리합니다."
        id: C-000-state
        implementation_notes:
          - 초기 `isCopied` 상태는 `false`여야 합니다.
        title: 클라이언트 컴포넌트 선언 및 상태 관리 설정
      - category: 동작
        description: 버튼의 `onClick` 이벤트 핸들러 내에서 `navigator.clipboard.writeText()`를 호출하여 `textToCopy` prop의 값을 복사합니다. 복사 성공 후
          `isCopied` 상태를 `true`로 변경합니다.
        id: C-000-copy-logic
        title: 클립보드 복사 로직 구현
      - category: 동작
        description: 복사 성공 시 `setTimeout`을 사용하여 1.5초 후에 `isCopied` 상태를 다시 `false`로 되돌리는 로직을 추가합니다.
        id: C-000-state-reset
        implementation_notes:
          - 컴포넌트 언마운트 시 `clearTimeout`을 호출하여 메모리 누수를 방지하는 것이 좋습니다. (useEffect 활용)
        title: 복사 완료 상태 자동 초기화 로직 구현
      - category: UI
        description: "`isCopied` 상태에 따라 버튼 내부의 텍스트나 아이콘이 조건부로 렌더링되도록 구현합니다. (예: '복사' -> '복사 완료!')"
        id: C-000-conditional-render
        title: 조건부 렌더링으로 사용자 피드백 제공
      - category: UI
        description: Tailwind CSS 유틸리티 클래스(`bg-white/10`, `backdrop-blur-xl`, `rounded-lg` 등)를 사용하여 Glassmorphism 스타일을 적용합니다.
        id: C-000-styling
        title: Glassmorphism 스타일 적용
    title: 재사용 가능한 UI 컴포넌트 `CliCopy` 구현
  - completion_criteria:
      - 페이지 타이틀과 설명이 브라우저 탭에 올바르게 표시되어야 합니다.
      - 전역 폰트 및 배경 스타일이 페이지에 적용되어야 합니다.
    dependencies:
      - setup-project
    description: "`src/app/layout.tsx` 파일에서 페이지의 기본 HTML 구조를 설정하고, SEO를 위한 메타데이터(title, description)를 추가합니다. 또한 전역 CSS 파일을
      임포트하고 기본 폰트를 설정합니다."
    files:
      - description: 애플리케이션의 루트 레이아웃. HTML, HEAD, BODY 태그 구조와 메타데이터, 전역 스타일을 정의합니다.
        path: src/app/layout.tsx
        type: modify
    id: setup-layout
    order: 3
    priority: P1
    subtasks:
      - category: setup
        description: Next.js의 `Metadata` 객체를 export하여 `title`과 `description`을 설정합니다.
        id: setup-layout-metadata
        implementation_notes:
          - "title: 'firstvibe - MVP의 첫 진동'"
          - "description: '당신의 한 문장의 아이디어를 확장시켜 MVP로 만들기 위한 토대를 만들어드립니다.'"
        title: SEO 메타데이터 설정
      - category: UI
        description: "`<body>` 태그에 전역 폰트 클래스와 기본 배경색/텍스트색을 적용합니다."
        id: setup-layout-global-styles
        implementation_notes:
          - TRD의 디자인 가이드에 따라 적절한 배경색과 폰트를 `tailwind.config.ts`에 정의하고 사용합니다.
        title: 전역 스타일 및 폰트 적용
    title: 루트 레이아웃(`layout.tsx`) 설정 및 메타데이터 추가
  - completion_criteria:
      - 헤드라인과 서브헤드라인 텍스트가 TRD와 동일하게 렌더링되어야 합니다.
      - '`CliCopy` 컴포넌트가 `textToCopy="npx firstvibe"` prop과 함께 올바르게 렌더링되고 동작해야 합니다.'
    dependencies:
      - C-000
    description: 랜딩 페이지의 최상단에 위치하는 히어로 섹션을 구현합니다. 제품의 핵심 가치를 전달하는 헤드라인과 `CliCopy` 컴포넌트를 포함합니다.
    files:
      - description: 랜딩 페이지의 히어로 섹션 컴포넌트
        path: src/components/landing/HeroSection.tsx
        type: create
    id: C-001
    order: 4
    priority: P1
    subtasks:
      - category: UI
        description: 컴포넌트 파일 생성 및 기본 구조를 작성합니다.
        id: C-001-scaffold
        title: 컴포넌트 파일 생성
      - category: UI
        description: "`h1` 태그로 헤드라인(`MVP의 첫 진동, firstvibe.`)을, `p` 태그로 서브헤드라인을 추가하고 Tailwind CSS로 스타일링합니다."
        id: C-001-text-content
        title: 헤드라인 및 서브헤드라인 텍스트 추가
      - category: 내부구현
        description: 개발된 `CliCopy` 컴포넌트를 임포트하고, `textToCopy="npx firstvibe"` prop을 전달하여 렌더링합니다.
        id: C-001-integrate-clicopy
        title: CliCopy 컴포넌트 통합
    title: 히어로 섹션 컴포넌트 `HeroSection` 구현
  - completion_criteria:
      - "'How it works'와 같은 섹션 제목이 표시되어야 합니다."
      - "`how-it-works.svg` 이미지가 `next/image`를 통해 깨짐 없이 정상적으로 표시되어야 합니다."
    dependencies:
      - setup-project
    description: 제품의 작동 방식을 시각적으로 설명하는 'How It Works' 섹션을 구현합니다. 제목과 설명 다이어그램 이미지로 구성됩니다.
    files:
      - description: 제품 작동 방식을 설명하는 섹션 컴포넌트
        path: src/components/landing/HowItWorksSection.tsx
        type: create
      - description: "'아이디어 입력 → Q&A 진행 → 산출물 생성' 흐름을 나타내는 다이어그램 이미지"
        path: public/images/how-it-works.svg
        type: create
    id: C-002
    order: 5
    priority: P1
    subtasks:
      - category: UI
        description: 섹션의 제목을 `h2` 태그로 추가하고 스타일링합니다.
        id: C-002-title
        title: 섹션 제목 추가
      - category: UI
        description: "`next/image` 컴포넌트를 사용하여 `public/images/how-it-works.svg` 이미지를 렌더링합니다. `alt` 속성을 적절하게 제공해야 합니다."
        id: C-002-image
        implementation_notes:
          - 이미지 크기(width, height)를 지정하여 레이아웃 시프트를 방지합니다.
        title: 작동 방식 다이어그램 이미지 표시
    title: 작동 방식 섹션 컴포넌트 `HowItWorksSection` 구현
  - completion_criteria:
      - TRD에 명시된 4개의 기능이 모두 아이콘, 제목, 설명과 함께 정확하게 표시되어야 합니다.
      - 데스크탑(2x2 또는 4x1)과 모바일(1x4) 화면 크기에 따라 그리드 레이아웃이 적절하게 변경되어야 합니다.
    dependencies:
      - setup-project
    description: 제품의 4가지 핵심 기능을 소개하는 섹션을 구현합니다. 각 기능은 아이콘, 제목, 설명으로 구성되며, 반응형 그리드 레이아웃으로 배치됩니다.
    files:
      - description: 핵심 기능 소개 섹션 컴포넌트
        path: src/components/landing/FeaturesSection.tsx
        type: create
      - description: 기능 1 아이콘
        path: public/images/icon-feature-1.svg
        type: create
      - description: 기능 2 아이콘
        path: public/images/icon-feature-2.svg
        type: create
      - description: 기능 3 아이콘
        path: public/images/icon-feature-3.svg
        type: create
      - description: 기능 4 아이콘
        path: public/images/icon-feature-4.svg
        type: create
    id: C-003
    order: 6
    priority: P1
    subtasks:
      - category: 데이터처리
        description: 4개 기능의 데이터(아이콘 경로, 제목, 설명)를 배열이나 객체 형태로 컴포넌트 내에 정의합니다.
        id: C-003-data
        implementation_notes:
          - 데이터를 분리하면 UI 코드와 콘텐츠를 분리하여 유지보수성을 높일 수 있습니다.
        title: 기능 데이터 구조화
      - category: UI
        description: 정의된 기능 데이터를 `map` 함수로 순회하며 각 기능 아이템을 렌더링합니다. 각 아이템은 아이콘, 제목, 설명 텍스트를 포함합니다.
        id: C-003-render-items
        implementation_notes:
          - "`next/image`를 사용하여 아이콘을 렌더링합니다."
        title: 기능 아이템 리스트 렌더링
      - category: UI
        description: Tailwind CSS의 그리드 유틸리티(`grid`, `grid-cols-*`, `gap-*`)와 반응형 접두사(`md:`, `lg:`)를 사용하여 데스크탑과 모바일 환경에 맞는 레이아웃을
          구현합니다.
        id: C-003-responsive-layout
        implementation_notes:
          - "예: `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8`"
        title: 반응형 그리드 레이아웃 적용
    title: 핵심 기능 섹션 컴포넌트 `FeaturesSection` 구현
  - completion_criteria:
      - 섹션 제목과 타겟 고객 리스트가 TRD에 명시된 내용과 정확히 일치하게 표시되어야 합니다.
    dependencies:
      - setup-project
    description: "'이런 분들께 추천합니다'와 같은 제목과 함께 제품의 주요 타겟 고객을 리스트 형태로 보여주는 섹션을 구현합니다."
    files:
      - description: 타겟 고객 소개 섹션 컴포넌트
        path: src/components/landing/TargetAudienceSection.tsx
        type: create
    id: C-004
    order: 7
    priority: P1
    subtasks:
      - category: UI
        description: "'이런 분들께 추천합니다' 제목을 `h2` 태그로 추가합니다."
        id: C-004-title
        title: 섹션 제목 추가
      - category: UI
        description: TRD에 명시된 타겟 고객(초기 창업가, 사이드 프로젝트 진행자 등) 목록을 `ul`과 `li` 태그를 사용하여 렌더링합니다.
        id: C-004-list
        title: 타겟 고객 리스트 렌더링
    title: 대상 고객 섹션 컴포넌트 `TargetAudienceSection` 구현
  - completion_criteria:
      - "'지금 바로 시작해보세요'와 같은 행동 유도 문구가 표시되어야 합니다."
      - "`CliCopy` 컴포넌트가 올바르게 렌더링되고 정상적으로 동작해야 합니다."
    dependencies:
      - C-000
    description: 랜딩 페이지의 마지막 부분에서 사용자의 행동을 유도하는 마무리 CTA(Call To Action) 섹션을 구현합니다. `HeroSection`과 동일한 `CliCopy` 컴포넌트를 재사용합니다.
    files:
      - description: 마무리 행동 유도(CTA) 섹션 컴포넌트
        path: src/components/landing/FinalCtaSection.tsx
        type: create
    id: C-005
    order: 8
    priority: P1
    subtasks:
      - category: UI
        description: "'지금 바로 시작해보세요'와 같은 행동 유도 문구를 `h2` 또는 `p` 태그로 추가합니다."
        id: C-005-text
        title: 행동 유도 문구 추가
      - category: 내부구현
        description: "`CliCopy` 컴포넌트를 임포트하여 재사용합니다. `HeroSection`에서 사용한 것과 동일한 prop을 전달합니다."
        id: C-005-integrate-clicopy
        title: CliCopy 컴포넌트 재사용
    title: 마무리 CTA 섹션 컴포넌트 `FinalCtaSection` 구현
  - completion_criteria:
      - 저작권 정보 `© 2024 firstvibe`가 정확히 표시되어야 합니다.
      - "요청된 소셜 링크(예: GitHub)가 아이콘 형태로 표시되어야 합니다."
    dependencies:
      - setup-project
    description: 웹사이트의 가장 하단에 위치하는 푸터 섹션을 구현합니다. 저작권 정보와 소셜 미디어 링크 등을 포함합니다.
    files:
      - description: 웹사이트 푸터 컴포넌트
        path: src/components/landing/Footer.tsx
        type: create
    id: C-006
    order: 9
    priority: P1
    subtasks:
      - category: UI
        description: "`<footer>` 태그 내에 `© 2024 firstvibe` 텍스트를 추가합니다."
        id: C-006-copyright
        title: 저작권 정보 표시
      - category: UI
        description: GitHub 등 필요한 소셜 링크를 아이콘과 함께 `<a>` 태그로 추가합니다. 아이콘은 SVG 파일을 직접 사용하거나 아이콘 라이브러리를 사용할 수 있습니다.
        id: C-006-social-links
        title: 소셜 링크 추가
    title: 푸터 섹션 컴포넌트 `Footer` 구현
  - completion_criteria:
      - 모든 섹션 컴포넌트(`C-001`부터 `C-006`까지)가 TRD에 명시된 순서대로 렌더링되어야 합니다.
      - 페이지를 스크롤했을 때 모든 섹션의 콘텐츠가 정상적으로 보여야 합니다.
    dependencies:
      - C-001
      - C-002
      - C-003
      - C-004
      - C-005
      - C-006
    description: "`src/app/page.tsx` 파일에서 개발된 모든 랜딩 페이지 섹션 컴포넌트들을 순서대로 임포트하여 최종 랜딩 페이지를 완성합니다."
    files:
      - description: 메인 랜딩 페이지. 모든 섹션 컴포넌트를 조립하여 표시합니다.
        path: src/app/page.tsx
        type: modify
    id: P-001
    order: 10
    priority: P2
    subtasks:
      - category: 내부구현
        description: "`C-001`부터 `C-006`까지의 모든 섹션 컴포넌트를 `import` 합니다."
        id: P-001-import
        title: 섹션 컴포넌트 임포트
      - category: UI
        description: 메인 페이지 컴포넌트의 JSX 내에 임포트한 컴포넌트들을 TRD에 명시된 순서(Hero, HowItWorks, Features, TargetAudience, FinalCta, Footer)대로
          배치합니다.
        id: P-001-layout
        implementation_notes:
          - 각 섹션 사이에 적절한 간격(margin/padding)을 두어 가독성을 확보합니다.
        title: 컴포넌트 순차적 배치
    title: 메인 페이지(`page.tsx`)에 모든 섹션 컴포넌트 조립
  - completion_criteria:
      - 페이지 방문 시 Google Analytics 실시간 리포트에 방문자가 기록되어야 합니다.
      - "`CliCopy` 컴포넌트의 복사 버튼 클릭 시, GA 실시간 리포트의 이벤트 탭에 'copy_cli_command' 이벤트가 기록되어야 합니다."
    dependencies:
      - C-000
      - setup-layout
    description: "`@next/third-party` 라이브러리를 사용하여 Google Analytics(GA4)를 연동하고, `CliCopy` 컴포넌트의 복사 버튼 클릭 시 추적 이벤트를 전송하도록 구현합니다."
    files:
      - description: "`@next/third-party`의 `GoogleAnalytics` 컴포넌트를 추가하여 GA 스크립트를 삽입합니다."
        path: src/app/layout.tsx
        type: modify
      - description: 클릭 이벤트 핸들러에 GA 이벤트 전송 로직을 추가합니다.
        path: src/components/ui/CliCopy.tsx
        type: modify
      - description: GA 이벤트 전송을 위한 래퍼 함수를 정의합니다 (선택사항).
        path: src/lib/analytics.ts
        type: create
    id: NFR-005
    order: 11
    priority: P2
    risks:
      - mitigation: GA_MEASUREMENT_ID를 환경 변수(`.env.local`)로 관리하고, `next.config.mjs`를 통해 클라이언트 측에 노출시키도록 설정합니다. 코드에 직접 하드코딩하지 않도록
          주의합니다.
        risk: Google Analytics 측정 ID(GA_MEASUREMENT_ID)가 코드에 하드코딩될 경우, 소스 코드 관리 및 보안에 취약할 수 있습니다.
    subtasks:
      - category: setup
        description: "`npm install @next/third-party` 명령어로 라이브러리를 설치합니다."
        id: NFR-005-install
        title: "@next/third-party 설치"
      - category: 내부구현
        description: "`src/app/layout.tsx` 파일에 `@next/third-party/google`로부터 `GoogleAnalytics` 컴포넌트를 임포트하고, `<body>` 태그 내에
          `gaId` prop과 함께 추가합니다."
        id: NFR-005-script-injection
        implementation_notes:
          - <GoogleAnalytics gaId="G-XXXXXXXXXX" />
        title: GA 스크립트 삽입
      - category: 내부구현
        description: "`CliCopy.tsx`의 버튼 `onClick` 핸들러 내에 `window.gtag('event', 'copy_cli_command')` 호출 코드를 추가하여 클릭 이벤트를 추적합니다."
        id: NFR-005-event-tracking
        implementation_notes:
          - "`window.gtag`가 존재하는지 확인하는 타입 가드를 추가하여 타입스크립트 오류를 방지합니다."
        title: 복사 버튼 클릭 이벤트 추적 구현
    title: Google Analytics 연동 및 이벤트 추적 구현
  - completion_criteria:
      - 프로젝트 내의 모든 이미지가 `next/image` 컴포넌트를 통해 로드되어야 합니다.
      - Chrome 개발자 도구를 사용하여 360px, 768px, 1024px 너비에서 테스트했을 때 레이아웃이 깨지거나 콘텐츠 가독성이 저하되지 않아야 합니다.
      - Google PageSpeed Insights 점수가 모바일 및 데스크탑 환경에서 90점 이상을 달성해야 합니다.
    dependencies:
      - P-001
    description: 모든 이미지를 `next/image`를 사용하여 최적화하고, 전체 페이지의 반응형 디자인을 다양한 디바이스 크기에서 최종 점검 및 수정하여 일관된 사용자 경험을 제공합니다.
    files:
      - description: 이미지가 사용된 모든 섹션 컴포넌트들의 `<img>` 태그를 `<Image>`로 교체하고 반응형 스타일을 최종 점검합니다.
        path: src/components/landing/*.tsx
        type: modify
    id: NFR-001-002
    order: 12
    priority: P2
    subtasks:
      - category: 성능
        description: 프로젝트 내 모든 `<img>` 태그를 `next/image` 컴포넌트로 교체합니다. `width`, `height`, `alt` 속성을 필수로 제공합니다.
        id: NFR-001-002-image-opt
        implementation_notes:
          - SVG 이미지의 경우에도 `next/image` 사용이 가능하며, 적절한 크기를 지정해야 합니다.
        title: next/image를 사용한 이미지 최적화
      - category: UI
        description: 브라우저 개발자 도구의 디바이스 모드를 사용하여 다양한 너비(360px, 768px, 1024px, 1280px 등)에서 전체 페이지의 레이아웃을 확인하고, 깨지는 부분을 수정합니다.
        id: NFR-001-002-responsive-qa
        implementation_notes:
          - 글자 크기, 간격, 그리드 컬럼 수 등을 Tailwind CSS 반응형 접두사를 사용하여 조정합니다.
        title: 전체 페이지 반응형 디자인 최종 점검 및 수정
      - category: test
        description: Google PageSpeed Insights를 사용하여 배포된 페이지(또는 로컬 터널링)의 성능을 측정하고, 개선이 필요한 항목을 확인하여 수정합니다.
        id: NFR-001-002-pagespeed
        implementation_notes:
          - LCP, FCP, CLS와 같은 Core Web Vitals 지표에 집중합니다.
        title: PageSpeed Insights 성능 측정 및 개선
    title: 성능 최적화 및 반응형 최종 점검
